{"version":3,"sources":["components/QuestionPage.js","App.js","reportWebVitals.js","index.js"],"names":["QuestionPage","questions","require","useState","questionAsked","setQuestionAsked","userTimeLimit","setUserTimeLimit","userCountDown","setUserCountDown","useModal","modalProps","getTriggerProps","className","countdownTime","timeLimit","showReplayControls","onClick","e","parseInt","target","value","defaultValue","placeholder","label","type","Object","keys","map","k","values","v","ind","q","qInd","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+qKAmFeA,MA1Ef,WACE,IAAMC,EAAYC,EAAQ,IAC1B,EAA0CC,mBAAS,0BAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA0CF,mBAAS,KAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA0CJ,mBAAS,KAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KAEA,EAAwCC,YAAS,IAAzCC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,gBAGpB,OACE,0BAASC,UAAU,eAAnB,UACE,sBAAKA,UAAU,4CAAf,UACE,oCAAQT,EAAR,OACA,gDAASS,UAAU,mBAAsBD,KAAzC,qCAIF,sBAAKC,UAAU,gBAAf,UACE,sBAAKA,UAAU,4CAAf,UACE,cAAC,IAAD,CACEC,cAAeN,EACfO,UAAWT,EACXU,oBAAoB,IAEtB,yBAAQH,UAAU,mBAAmBI,QAAS,SAAAC,GAAC,OAAIX,EAAiBY,SAASD,EAAEE,OAAOC,SAAtF,UACE,wBAAQA,MAAM,QAAd,oCACA,wBAAQA,MAAM,QAAd,oCACA,wBAAQA,MAAM,QAAd,kCACA,wBAAQA,MAAM,SAAd,mCACA,wBAAQC,cAAY,EAACD,MAAM,SAA3B,sCAGF,yBAAQR,UAAU,mBAAmBI,QAAS,SAAAC,GAAC,OAAIT,EAAiBU,SAASD,EAAEE,OAAOC,SAAtF,UACE,wBAAQC,cAAY,EAACD,MAAM,OAA3B,kCACA,wBAAQA,MAAM,QAAd,mCACA,wBAAQA,MAAM,QAAd,mCACA,wBAAQA,MAAM,QAAd,iCACA,wBAAQA,MAAM,SAAd,kCACA,wBAAQA,MAAM,SAAd,wCAIJ,sBAAKR,UAAU,4CAAf,UACE,mEACA,0BAAUU,YAAY,8BAA8BC,MAAM,QAAQX,UAAU,4BAA4BY,KAAK,eAKjH,cAAC,IAAD,yBAAOZ,UAAU,4BAA+BF,GAAhD,aACA,eAAC,IAAD,WACE,gCAAK,yDAA4BP,EAA5B,OAAL,OACA,cAAC,IAAD,UAEIsB,OAAOC,KAAK1B,GAAW2B,KAAI,SAAAC,GAAC,OAC1B,cAAC,IAAD,UAAcA,GAAJA,QAKdH,OAAOI,OAAO7B,GAAW2B,KAAI,SAACG,EAAEC,GAAH,OAC3B,cAAC,IAAD,CAAUnB,UAAU,gCAApB,SACGkB,EAAEH,KAAI,SAACK,EAAEC,GAAH,OAAa,wBAAmBrB,UAAU,4BAA4BQ,MAAOY,EAAGhB,QAAS,SAAAC,GAAC,OAAIb,EAAiBa,EAAEE,OAAOC,QAA3G,SAAoHY,GAAvGC,OADsBF,gB,MCtDtDG,MAXf,WACE,OACE,qBAAKtB,UAAU,MAAf,SACI,qBAAKA,UAAU,cAAf,SACI,cAAC,EAAD,SCGGuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9c342141.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport VideoRecorder from 'react-video-recorder'\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport './react-tabs.scss';\nimport './QuestionPage.scss';\nimport { useModal, Modal } from 'react-morphing-modal';\nimport './react-modal-custom.scss';\n\n\nfunction QuestionPage() {\n  const questions = require(\"../questions.json\")\n  const [questionAsked, setQuestionAsked] = useState(\"Tell Me About Yourself\")\n  const [userTimeLimit, setUserTimeLimit] = useState(30000)\n  const [userCountDown, setUserCountDown] = useState(3000)\n\n  const { modalProps, getTriggerProps } = useModal({\n  });\n\n  return (\n    <section className=\"QuestionPage\" >\n      <div className=\"question-title-area question-page-section\">\n        <h2 >  {questionAsked} </h2>\n        <button  className=\"change-question\" {...getTriggerProps()}>Change Question</button>\n\n      </div>\n\n      <div className=\"question-area\" >\n        <div className=\"question-area-video question-page-section\">\n          <VideoRecorder\n            countdownTime={userCountDown}\n            timeLimit={userTimeLimit}\n            showReplayControls={true}\n          />\n          <select className=\"recording-option\" onClick={e => setUserTimeLimit(parseInt(e.target.value))}>\n            <option value=\"10000\">Time Limit: 10 seconds</option>\n            <option value=\"30000\">Time Limit: 30 seconds</option>\n            <option value=\"60000\">Time Limit: 1 minute</option>\n            <option value=\"120000\">Time Limit: 2 minutes</option>\n            <option defaultValue value=\"180000\">Time Limit: 3 minutes</option>\n          </select>\n\n          <select className=\"recording-option\" onClick={e => setUserCountDown(parseInt(e.target.value))}>\n            <option defaultValue value=\"3000\">Countdown: 3 seconds</option>\n            <option value=\"10000\">Countdown: 10 seconds</option>\n            <option value=\"30000\">Countdown: 30 seconds</option>\n            <option value=\"60000\">Countdown: 1 minute</option>\n            <option value=\"120000\">Countdown: 2 minutes</option>\n            <option value=\"180000\">Countdown: 3 minutes</option>\n          </select>\n        </div>\n\n        <div className=\"question-area-notes question-page-section\">\n          <p>Some Space to gather your thoughts</p>\n          <textarea placeholder=\"click here and start typing\" label=\"notes\" className=\"question-area-notes-input\" type=\"text\"></textarea>\n\n        </div>\n      </div>\n\n      <Modal className=\"question-selection-modal\" {...modalProps}>\n      <Tabs>\n        <div><p>THE CURRENT QUESTION :  {questionAsked} </p> </div>\n        <TabList>\n          {\n            Object.keys(questions).map(k => (\n              <Tab key={k}>{k}</Tab>\n            ))\n          }\n        </TabList>\n        {\n          Object.values(questions).map((v,ind) => (\n            <TabPanel className=\"question-area-selection-panel\" key={ind} >\n              {v.map((q,qInd) => (<button key={qInd} className=\"question-selection-button\" value={q} onClick={e => setQuestionAsked(e.target.value)}>{q}</button>))}\n              \n            </TabPanel>\n          ))\n        }\n      </Tabs>\n      </Modal>\n\n    </section>\n  );\n}\n\nexport default QuestionPage;\n","import React from 'react'\nimport './App.scss';\nimport QuestionPage from './components/QuestionPage';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"app-content\">\n            <QuestionPage />\n        </div>\n        {/* <Footer /> */}\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}